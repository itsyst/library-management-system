@model IEnumerable<Library.Domain.BookDetails>

@{
    ViewData["Title"] = "Books Library";
    var status = Context.Request.Query["status"];
    var isAvailable = "filter-btn";
    var all = "filter-btn";

    switch (status)
    {
        case "isAvailable":
            isAvailable = "filter-btn active";
            break;
        case "all":
            all = "filter-btn active";
            break;
        default:
            all = "filter-btn active";
            break;
    }
}

<!-- Modern Books Container -->
<div class="container-fluid px-4 py-5">
    <!-- Header Section -->
    <div class="books-header mb-5">
        <div class="d-flex align-items-center justify-content-between flex-wrap gap-3">
            <div class="header-content">
                <h1 class="display-6 fw-bold mb-2">Books Library</h1>
                <p class="text-muted">Manage your book collection with ease</p>
            </div>

            <!-- Filter & Action Bar -->
            <div class="header-actions d-flex align-items-center gap-3 flex-wrap">
                <!-- Filter Buttons -->
                <div class="filter-group">
                    <a asp-controller="Books" asp-action="Index" asp-route-status="all"
                       class="@all" onclick="handleFilterChange(event, 'all')">
                        <i class="bi bi-collection"></i>
                        All Books
                    </a>
                    <a asp-controller="Books" asp-action="Index" asp-route-status="isAvailable"
                       class="@isAvailable" onclick="handleFilterChange(event, 'isAvailable')">
                        <i class="bi bi-check-circle"></i>
                        Available
                    </a>
                </div>

                <!-- Add New Button -->
                <a asp-controller="Books" asp-action="Create" class="btn-add-new">
                    <i class="bi bi-plus-circle"></i>
                    Add New Book
                </a>
            </div>
        </div>

        <!-- Search Bar -->
        <div class="search-section mt-4">
            <div class="search-container">
                <input type="text" id="searchInput" class="search-input" placeholder="Search books by title, author, or ISBN...">
                <i class="bi bi-search search-icon"></i>
                <button type="button" id="clearSearch" class="clear-search" style="display: none;">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        </div>

        <!-- Results Info -->
        <div class="results-info mt-3">
            <span id="resultsCount">@Model.Count() books</span>
            <span id="loadingSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;"></span>
        </div>
    </div>

    <!-- Books Grid -->
    <div class="books-grid" id="booksGrid">
        @foreach (var book in Model)
        {
            <div class="book-card" 
                 data-title="@book.Title.ToLower()" 
                 data-author="@(book.Author?.Name?.ToLower() ?? "")" 
                 data-isbn="@book.ISBN.ToLower()"
                 data-book-id="@book.ID">
                <div class="book-card-inner">
                    <!-- Book Cover -->
                    <div class="book-cover">
                        <img src="@(book.ImageBinary ?? "/uploads/9780555816023.png")"
                             alt="@book.Title"
                             class="cover-image"
                             onerror="this.src='/uploads/9780555816023.png'">

                        <!-- Status Badge -->
                        <div class="status-badge @(book.Copies.Any() ? "available" : "unavailable")">
                            <i class="bi @(book.Copies.Any() ? "bi-check-circle-fill" : "bi-x-circle-fill")"></i>
                            @(book.Copies.Any() ? "Available" : "Unavailable")
                        </div>

                        <!-- Quick Actions Overlay -->
                        <div class="quick-actions">
                            <a asp-controller="Books" asp-action="Edit" asp-route-id="@book.ID"
                               class="action-btn edit-btn" title="Edit Book">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button onclick="showBookDetails(@book.ID)"
                                    class="action-btn view-btn" title="Quick View">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button onclick="addBookCopy(@book.ID, '@book.Title')"
                                    class="action-btn add-btn" title="Add Copy">
                                <i class="bi bi-plus-circle"></i>
                            </button>
                            <button onclick="deleteBook(@book.ID, '@book.Title')"
                                    class="action-btn delete-btn" title="Delete Book">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Book Info -->
                    <div class="book-info">
                        <h3 class="book-title" title="@book.Title">@book.Title</h3>
                        <p class="book-author">by @(book.Author?.Name ?? "Unknown Author")</p>
                        <p class="book-isbn">ISBN: @book.ISBN</p>

                        <!-- Book Stats -->
                        <div class="book-stats">
                            <div class="stat-item">
                                <i class="bi bi-files"></i>
                                <span>@book.Copies.Count copies</span>
                            </div>
                            <div class="stat-item">
                                <i class="bi bi-check-circle"></i>
                                <span>@book.Copies.Count(c => c.IsAvailable) available</span>
                            </div>
                        </div>

                        <!-- Primary Action -->
                        <a asp-controller="Books" asp-action="Edit" asp-route-id="@book.ID"
                           class="primary-action">
                            Manage Book
                            <i class="bi bi-arrow-right"></i>
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
 
    <div class="empty-state" id="emptyState" style="display: none;">
        <div class="empty-content">
            <i class="bi bi-book"></i>
            <h3>No books found</h3>
            <p>Try adjusting your search or filters</p>
            <a asp-controller="Books" asp-action="Create" class="btn-add-new">
                <i class="bi bi-plus-circle"></i>
                Add First Book
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // ====================================================================
        // CONFIGURATION & INITIALIZATION
        // ====================================================================
        
        // Configure toastr
        if (typeof toastr !== 'undefined') {
            toastr.options = {
                closeButton: true,
                debug: false,
                newestOnTop: true,
                progressBar: true,
                positionClass: "toast-top-right",
                preventDuplicates: false,
                showDuration: "300",
                hideDuration: "1000",
                timeOut: "5000",
                extendedTimeOut: "1000",
                showEasing: "swing",
                hideEasing: "linear",
                showMethod: "fadeIn",
                hideMethod: "fadeOut"
            };
        }

        // Global variables
        let currentBooks = @Html.Raw(Json.Serialize(Model));
        let filteredBooks = [...currentBooks];
        let currentStatus = '@status' || 'all';

        // ====================================================================
        // SEARCH FUNCTIONALITY
        // ====================================================================
        
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const bookCards = document.querySelectorAll('.book-card');
            const clearBtn = document.getElementById('clearSearch');
            let visibleCount = 0;

            // Show/hide clear button
            clearBtn.style.display = searchTerm ? 'flex' : 'none';

            bookCards.forEach(card => {
                const title = card.getAttribute('data-title');
                const author = card.getAttribute('data-author');
                const isbn = card.getAttribute('data-isbn');

                if (title.includes(searchTerm) ||
                    (author && author.includes(searchTerm)) ||
                    isbn.includes(searchTerm)) {
                    card.style.display = 'block';
                    card.classList.add('search-match');
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                    card.classList.remove('search-match');
                }
            });

            // Update results count
            updateResultsCount(visibleCount, searchTerm);

            // Show/hide empty state
            document.getElementById('emptyState').style.display =
                visibleCount === 0 ? 'block' : 'none';
        });

        // Clear search
        document.getElementById('clearSearch').addEventListener('click', function() {
            document.getElementById('searchInput').value = '';
            document.getElementById('searchInput').dispatchEvent(new Event('input'));
            this.style.display = 'none';
        });

        // ====================================================================
        // FILTER FUNCTIONALITY
        // ====================================================================
        
        async function handleFilterChange(event, status) {
            event.preventDefault();
            
            // Update active filter button
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.closest('.filter-btn').classList.add('active');

            // Load new data
            await loadBooksData(status);
            
            // Update URL without page reload
            const newUrl = `${window.location.pathname}?status=${status}`;
            window.history.pushState({ status }, '', newUrl);
        }

        // ====================================================================
        // DATA LOADING
        // ====================================================================
        
        async function loadBooksData(status) {
            try {
                showLoading(true);
                
                const response = await fetch(`/Books/GetAll?status=${status}`);
                const result = await response.json();
                
                if (result && result.data) {
                    currentBooks = result.data;
                    filteredBooks = [...currentBooks];
                    renderBooks(currentBooks);
                    currentStatus = status;
                    
                    showSuccess(`Loaded ${currentBooks.length} books`);
                } else {
                    throw new Error('Invalid response format');
                }
            } catch (error) {
                console.error('Error loading books:', error);
                showError('Failed to load books. Please refresh the page.');
            } finally {
                showLoading(false);
            }
        }

        // ====================================================================
        // BOOK RENDERING
        // ====================================================================
        
        function renderBooks(books) {
            const booksGrid = document.getElementById('booksGrid');
            
            if (books.length === 0) {
                booksGrid.innerHTML = '';
                document.getElementById('emptyState').style.display = 'block';
                return;
            }

            document.getElementById('emptyState').style.display = 'none';
            
            booksGrid.innerHTML = books.map((book, index) => createBookCardHTML(book, index)).join('');
            
            // Animate cards entrance
            setTimeout(() => {
                const cards = document.querySelectorAll('.book-card');
                cards.forEach((card, index) => {
                    setTimeout(() => {
                        card.classList.add('loaded');
                    }, index * 50);
                });
            }, 100);
            
            updateResultsCount(books.length);
        }

        function createBookCardHTML(book, index) {
            const isAvailable = book.copies && book.copies.length > 0;
            const availableCopies = isAvailable ? book.copies.filter(c => c.isAvailable).length : 0;
            const bookData = JSON.stringify({
                id: book.id,
                title: book.title,
                author: book.author?.name || 'Unknown',
                isbn: book.isbn,
                description: book.description || 'No description',
                totalCopies: book.copies?.length || 0,
                availableCopies: availableCopies,
                imageBinary: book.imageBinary || '/uploads/9780555816023.png'
            });

            return `
                <div class="book-card" 
                     data-title="${book.title.toLowerCase()}" 
                     data-author="${(book.author?.name || '').toLowerCase()}" 
                     data-isbn="${book.isbn.toLowerCase()}"
                     data-book-id="${book.id}"
                     style="animation-delay: ${index * 50}ms">
                    <div class="book-card-inner">
                        <div class="book-cover">
                            <img src="${book.imageBinary || '/uploads/9780555816023.png'}"
                                 alt="${book.title}"
                                 class="cover-image"
                                 onerror="this.src='/uploads/9780555816023.png'">

                            <div class="status-badge ${isAvailable ? 'available' : 'unavailable'}">
                                <i class="bi ${isAvailable ? 'bi-check-circle-fill' : 'bi-x-circle-fill'}"></i>
                                ${isAvailable ? 'Available' : 'Unavailable'}
                            </div>

                            <div class="quick-actions">
                                <a href="/Books/Edit/${book.id}" class="action-btn edit-btn" title="Edit Book">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button onclick="showBookDetails(${book.id}, '${bookData.replace(/'/g, "\\'")}')"
                                        class="action-btn view-btn" title="Quick View">
                                    <i class="bi bi-eye"></i>
                                </button>
                                <button onclick="addBookCopy(${book.id}, '${book.title.replace(/'/g, "\\'")}')"
                                        class="action-btn add-btn" title="Add Copy">
                                    <i class="bi bi-plus-circle"></i>
                                </button>
                                <button onclick="deleteBook(${book.id}, '${book.title.replace(/'/g, "\\'")}')"
                                        class="action-btn delete-btn" title="Delete Book">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>

                        <div class="book-info">
                            <h3 class="book-title" title="${book.title}">${book.title}</h3>
                            <p class="book-author">by ${book.author?.name || 'Unknown Author'}</p>
                            <p class="book-isbn">ISBN: ${book.isbn}</p>

                            <div class="book-stats">
                                <div class="stat-item">
                                    <i class="bi bi-files"></i>
                                    <span>${book.copies?.length || 0} copies</span>
                                </div>
                                <div class="stat-item">
                                    <i class="bi bi-check-circle"></i>
                                    <span>${availableCopies} available</span>
                                </div>
                            </div>

                            <a href="/Books/Edit/${book.id}" class="primary-action">
                                Manage Book
                                <i class="bi bi-arrow-right"></i>
                            </a>
                        </div>
                    </div>
                </div>
            `;
        }

        // ====================================================================
        // BOOK ACTIONS
        // ====================================================================
        
        // Show book details in SweetAlert modal
        async function showBookDetails(bookId) {
            try {
                const response = await fetch(`/Books/GetBook/${bookId}`);
                const bookData = await response.json();

                // Capitalize first letter of title
                const formattedTitle = bookData.title.charAt(0).toUpperCase() + bookData.title.slice(1);

                // Unicode non-breaking space (U+00A0) for proper spacing
                const nbsp = '\u00A0';

                Swal.fire({
                    title: bookData.title,
                    html: `
                        <div class="row">
                            <div class="col-md-4">
                                <img src="${bookData.imageBinary}"
                                     class="img-fluid rounded"
                                     alt="${bookData.title}"
                                     style="max-height: 100%; width: 100%; object-fit: cover;">
                            </div>
                            <div class="col-md-8">
                                <p class="row mb-2"><strong style="color:gray;">Author:</strong>${nbsp}${bookData.author}</p>
                                <p class="row mb-2"><strong style="color:gray;">ISBN:</strong>${nbsp}${bookData.isbn}</p>
                                <p class="row mb-2"><strong style="color:gray;">Description:</strong><span style="text-align:start;">${bookData.description}</span></p>
                                <p class="row mb-2"><strong style="color:gray;">Total Copies:</strong>${nbsp}${bookData.totalCopies}</p>
                                <p class="row mb-2"><strong style="color:gray;">Available:</strong>${nbsp}${bookData.availableCopies}</p>
                            </div>
                        </div>
                    `,
                    showCancelButton: true,
                    confirmButtonText: `<i class="bi bi-pencil"></i>${nbsp}Edit Book`,
                    cancelButtonText: 'Close',
                    confirmButtonColor: '#1d4ed8',
                    cancelButtonColor: '#6c757d',
                    width: '600px'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = `/Books/Edit/${bookData.id}`;
                    }
                });
            } catch (error) {
                console.error('Error fetching book details:', error);
                showError('Failed to load book details');
            }
        }
 
        // Add book copy with SweetAlert confirmation
        async function addBookCopy(bookId, bookTitle) {
            const result = await Swal.fire({
                title: 'Add Book Copy',
                html: `Add a new copy of "<strong>${bookTitle}</strong>"?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#28a745',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="bi bi-plus-circle"></i> Yes, add copy!',
                cancelButtonText: 'Cancel'
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/Books/AddBookCopy/${bookId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': getAntiForgeryToken(),
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        await Swal.fire({
                            title: 'Success!',
                            text: data.message,
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });
                        
                        showSuccess(data.message);
                        await loadBooksData(currentStatus);
                    } else {
                        showError(data.message || 'Failed to add book copy');
                    }
                } catch (error) {
                    console.error('Error adding book copy:', error);
                    showError('An error occurred while adding the book copy');
                }
            }
        }

        // Delete book with SweetAlert confirmation
        async function deleteBook(bookId, bookTitle) {
            const nbsp = '\u00A0';

            const result = await Swal.fire({
                title: 'Are you sure?',
                html: `You want to delete "<strong>${bookTitle}</strong>"?<br><small class="text-muted">This action cannot be undone!</small>`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: `<i class="bi bi-trash"></i>${nbsp}Yes, delete it!`,
                cancelButtonText: 'Cancel',
                reverseButtons: false,
                focusCancel: true
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/Books/Delete/${bookId}`, {
                        method: 'DELETE',
                        headers: {
                            'RequestVerificationToken': getAntiForgeryToken(),
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        await Swal.fire({
                            title: 'Deleted!',
                            text: 'The book has been deleted successfully.',
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });
                        
                        showSuccess(data.message);
                        await loadBooksData(currentStatus);
                    } else {
                        showError(data.message || 'Failed to delete book');
                    }
                } catch (error) {
                    console.error('Error deleting book:', error);
                    showError('An error occurred while deleting the book');
                }
            }
        }

        // ====================================================================
        // UTILITY FUNCTIONS
        // ====================================================================
        
        function updateResultsCount(count, searchTerm = '') {
            const countElement = document.getElementById('resultsCount');
            if (countElement) {
                if (searchTerm) {
                    countElement.textContent = `Found ${count} books matching "${searchTerm}"`;
                } else {
                    countElement.textContent = `${count} books`;
                }
            }
        }

        function showLoading(show) {
            const spinner = document.getElementById('loadingSpinner');
            const grid = document.getElementById('booksGrid');
            
            if (spinner) spinner.style.display = show ? 'inline-block' : 'none';
            if (grid) grid.style.opacity = show ? '0.6' : '1';
        }

        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }

        function showSuccess(message) {
            if (typeof toastr !== 'undefined') {
                toastr.success(message);
            }
        }

        function showError(message) {
            if (typeof toastr !== 'undefined') {
                toastr.error(message);
            }
        }

        function showInfo(message) {
            if (typeof toastr !== 'undefined') {
                toastr.info(message);
            }
        }

        // ====================================================================
        // INITIALIZATION
        // ====================================================================
        
        document.addEventListener('DOMContentLoaded', function() {
            // Animate initial cards
            const bookCards = document.querySelectorAll('.book-card');
            bookCards.forEach((card, index) => {
                setTimeout(() => {
                    card.classList.add('loaded');
                }, index * 100);
            });

            // Show welcome message if no books
            if (currentBooks.length === 0) {
                showInfo('Welcome! Start by adding your first book.');
            }

            // Add keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                // Ctrl/Cmd + K to focus search
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    document.getElementById('searchInput').focus();
                }
                
                // Escape to clear search
                if (e.key === 'Escape') {
                    const searchInput = document.getElementById('searchInput');
                    if (searchInput.value) {
                        searchInput.value = '';
                        searchInput.dispatchEvent(new Event('input'));
                    }
                }
            });
        });
    </script>
}