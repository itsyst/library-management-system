@model IEnumerable<Library.Domain.Author>
@Html.AntiForgeryToken()

@{
    ViewData["Title"] = "Authors Library";
}

<div class="container-fluid px-4 py-5">
    <!-- Header Section -->
    <div class="authors-header mb-5">
        <div class="d-flex align-items-center justify-content-between flex-wrap gap-3">
            <div class="header-content">
                <h1 class="display-6 fw-bold mb-2">Authors Library</h1>
                <p class="text-muted mb-0">Manage your authors collection with ease</p>
            </div>

            <div class="header-actions d-flex align-items-center gap-3 flex-wrap">
                <a asp-action="Create" class="btn-add-new">
                    <i class="bi bi-plus-circle"></i>
                    Add New Author
                </a>
            </div>
        </div>

        <!-- Search Bar -->
        <div class="search-section mt-4">
            <div class="search-container">
                <input type="text" id="searchInput" class="search-input" placeholder="Search authors by name...">
                <i class="bi bi-search search-icon"></i>
                <button type="button" id="clearSearch" class="clear-search" style="display: none;">
                    <i class="bi bi-x"></i>
                </button>
            </div>
        </div>

        <!-- Results Info -->
        <div class="results-info mt-3">
            <span id="resultsCount">@Model.Count() authors</span>
            <span id="loadingSpinner" class="spinner-border spinner-border-sm ms-2" style="display: none;"></span>
        </div>
    </div>

    <!-- Authors Grid -->
    <div class="authors-grid" id="authorsGrid">
        @foreach (var author in Model)
        {
            <div class="author-card" data-name="@author.Name.ToLower()" data-author-id="@author.Id">
                <div class="author-card-inner">
                    <!-- Author Avatar -->
                    <div class="author-avatar">
                        <div class="avatar-circle">
                            <i class="bi bi-person-fill"></i>
                        </div>

                        <!-- Status Badge -->
                        <div class="status-badge @(author.Books?.Any() == true ? "has-books" : "no-books")">
                            <i class="bi @(author.Books?.Any() == true ? "bi-book-fill" : "bi-book")"></i>
                            @(author.Books?.Count ?? 0) Books
                        </div>

                        <!-- Quick Actions Overlay -->
                        <div class="quick-actions">
                            <a asp-action="Edit" asp-route-id="@author.Id" class="action-btn edit-btn" title="Edit Author">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button onclick="showAuthorDetails(@author.Id)" class="action-btn view-btn" title="Quick View">
                                <i class="bi bi-eye"></i>
                            </button>
                            <button onclick="deleteAuthor(@author.Id, '@author.Name')" class="action-btn delete-btn" title="Delete Author">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Author Info -->
                    <div class="author-info">
                        <h3 class="author-name" title="@author.Name">@author.Name</h3>

                        <!-- Author Stats -->
                        <div class="author-stats">
                            <div class="stat-item">
                                <i class="bi bi-book"></i>
                                <span>@(author.Books?.Count ?? 0) books</span>
                            </div>
                        </div>

                        <!-- Book Titles Preview -->
                        @if (author.Books?.Any() == true)
                        {
                            <div class="books-preview">
                                <small class="text-muted">Recent books:</small>
                                <div class="book-titles">
                                    @foreach (var book in author.Books.Take(3))
                                    {
                                        <span class="book-title-pill">@book.Title</span>
                                    }
                                    @if (author.Books.Count > 3)
                                    {
                                        <span class="more-books">+@(author.Books.Count - 3) more</span>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Primary Action -->
                        <a asp-action="Edit" asp-route-id="@author.Id" class="primary-action">
                            Manage Author
                            <i class="bi bi-arrow-right"></i>
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Empty State -->
    <div class="empty-state" id="emptyState" style="display: none;">
        <div class="empty-content">
            <i class="bi bi-person-plus"></i>
            <h3>No authors found</h3>
            <p>Try adjusting your search</p>
            <a asp-action="Create" class="btn-add-new">
                <i class="bi bi-plus-circle"></i>
                Add First Author
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <script>
        // Configure toastr
        toastr.options = {
            closeButton: true,
            newestOnTop: true,
            progressBar: true,
            positionClass: "toast-top-right",
            timeOut: "3500",
            showMethod: "fadeIn",
            hideMethod: "fadeOut"
        };

        // Global variables
        let currentAuthors = @Html.Raw(Json.Serialize(Model));

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const authorCards = document.querySelectorAll('.author-card');
            const clearBtn = document.getElementById('clearSearch');
            let visibleCount = 0;

            clearBtn.style.display = searchTerm ? 'flex' : 'none';

            authorCards.forEach(card => {
                const name = card.getAttribute('data-name');
                if (name.includes(searchTerm)) {
                    card.style.display = 'block';
                    card.classList.add('search-match');
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                    card.classList.remove('search-match');
                }
            });

            updateResultsCount(visibleCount, searchTerm);
            document.getElementById('emptyState').style.display = visibleCount === 0 ? 'block' : 'none';
        });

        // Clear search
        document.getElementById('clearSearch').addEventListener('click', function() {
            document.getElementById('searchInput').value = '';
            document.getElementById('searchInput').dispatchEvent(new Event('input'));
            this.style.display = 'none';
        });

        // Show author details
        async function showAuthorDetails(authorId) {
            try {
                const response = await fetch(`/Authors/GetAuthor/${authorId}`);
                if (!response.ok) throw new Error('Author not found');

                const authorData = await response.json();
                const booksList = authorData.books?.length > 0
                    ? authorData.books.map(book => `• ${book.title}`).join('<br>')
                    : 'No books published yet';

                Swal.fire({
                    title: authorData.name,
                    html: `
                        <div class="text-start">
                            <p class="mb-2"><strong class="text-muted">Books Count:</strong> ${authorData.books?.length || 0}</p>
                            <p class="mb-2"><strong class="text-muted">Published Books:</strong></p>
                            <div style="max-height: 200px; overflow-y: auto; text-align: start; font-size: 0.9rem;">
                                ${booksList}
                            </div>
                        </div>
                    `,
                    showCancelButton: true,
                    confirmButtonText: '<i class="bi bi-pencil"></i> Edit Author',
                    cancelButtonText: 'Close',
                    confirmButtonColor: '#0d6efd',
                    cancelButtonColor: '#6c757d',
                    width: '500px'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = `/Authors/Edit/${authorData.id}`;
                    }
                });
            } catch (error) {
                console.error('Error fetching author details:', error);
                toastr.error('Failed to load author details');
            }
        }

        // Delete author
        async function deleteAuthor(authorId, authorName) {
            const result = await Swal.fire({
                title: 'Are you sure?',
                html: `You want to delete "<strong>${authorName}</strong>"?<br><small class="text-muted">This action cannot be undone!</small>`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="bi bi-trash"></i> Yes, delete!',
                cancelButtonText: 'Cancel',
                focusCancel: true
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/Authors/Delete/${authorId}`, {
                        method: 'DELETE',
                        headers: {
                            'RequestVerificationToken': getAntiForgeryToken(),
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();

                    if (data.success) {
                        await Swal.fire({
                            title: 'Deleted!',
                            text: 'The author has been deleted successfully.',
                            icon: 'success',
                            timer: 2000,
                            showConfirmButton: false
                        });

                        toastr.success(data.message);
                        location.reload();
                    } else {
                        toastr.error(data.message || 'Failed to delete author');
                    }
                } catch (error) {
                    console.error('Error deleting author:', error);
                    toastr.error('An error occurred while deleting the author');
                }
            }
        }

        // Utility functions
        function updateResultsCount(count, searchTerm = '') {
            const countElement = document.getElementById('resultsCount');
            if (countElement) {
                if (searchTerm) {
                    countElement.textContent = `Found ${count} authors matching "${searchTerm}"`;
                } else {
                    countElement.textContent = `${count} authors`;
                }
            }
        }

        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }

        // Initialization
        document.addEventListener('DOMContentLoaded', function() {
            // Animate initial cards
            const authorCards = document.querySelectorAll('.author-card');
            authorCards.forEach((card, index) => {
                setTimeout(() => {
                    card.classList.add('loaded');
                }, index * 100);
            });

            // Show welcome message if no authors
            if (currentAuthors.length === 0) {
                toastr.info('Welcome! Start by adding your first author.');
            }

            // Add keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    document.getElementById('searchInput').focus();
                }

                if (e.key === 'Escape') {
                    const searchInput = document.getElementById('searchInput');
                    if (searchInput.value) {
                        searchInput.value = '';
                        searchInput.dispatchEvent(new Event('input'));
                    }
                }
            });
        });

        // Make functions global for onclick handlers
        window.showAuthorDetails = showAuthorDetails;
        window.deleteAuthor = deleteAuthor;
    </script>
}
