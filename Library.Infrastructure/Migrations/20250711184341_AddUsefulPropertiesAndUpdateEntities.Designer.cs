// <auto-generated />
using System;
using Library.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250711184341_AddUsefulPropertiesAndUpdateEntities")]
    partial class AddUsefulPropertiesAndUpdateEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Library.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Biography")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("date");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Authors_Name");

                    b.ToTable("Authors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "English playwright, poet, and actor, widely regarded as the greatest writer in the English language.",
                            BirthDate = new DateTime(1564, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DeathDate = new DateTime(1616, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "William Shakespeare",
                            Nationality = "English"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Canadian clinical psychologist and professor of psychology.",
                            BirthDate = new DateTime(1962, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            IsDeleted = false,
                            Name = "Jordan B. Peterson",
                            Nationality = "Canadian"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "American writer and lecturer, developer of courses in self-improvement.",
                            BirthDate = new DateTime(1888, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DeathDate = new DateTime(1955, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Dale Carnegie",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "American software engineer and instructor, known for his many books on software development.",
                            BirthDate = new DateTime(1952, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            IsDeleted = false,
                            Name = "Robert C. Martin",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Agile coach and author specializing in Scrum and team dynamics.",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            IsDeleted = false,
                            Name = "Geoff Watts",
                            Nationality = "British"
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.BookCopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("DetailsId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique()
                        .HasDatabaseName("IX_BookCopies_Barcode")
                        .HasFilter("[Barcode] IS NOT NULL");

                    b.HasIndex("DetailsId")
                        .HasDatabaseName("IX_BookCopies_DetailsId");

                    b.ToTable("BookCopies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = "BC001",
                            Condition = "Good",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DetailsId = 1,
                            IsAvailable = true,
                            IsDeleted = false,
                            Location = "A-101"
                        },
                        new
                        {
                            Id = 2,
                            Barcode = "BC002",
                            Condition = "Excellent",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DetailsId = 1,
                            IsAvailable = true,
                            IsDeleted = false,
                            Location = "A-102"
                        },
                        new
                        {
                            Id = 3,
                            Barcode = "BC003",
                            Condition = "Good",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DetailsId = 2,
                            IsAvailable = false,
                            IsDeleted = false,
                            Location = "A-103"
                        },
                        new
                        {
                            Id = 4,
                            Barcode = "BC004",
                            Condition = "Fair",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DetailsId = 3,
                            IsAvailable = false,
                            IsDeleted = false,
                            Location = "A-104"
                        },
                        new
                        {
                            Id = 5,
                            Barcode = "BC005",
                            Condition = "New",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DetailsId = 4,
                            IsAvailable = true,
                            IsDeleted = false,
                            Location = "B-201"
                        },
                        new
                        {
                            Id = 6,
                            Barcode = "BC006",
                            Condition = "Good",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DetailsId = 5,
                            IsAvailable = false,
                            IsDeleted = false,
                            Location = "B-202"
                        },
                        new
                        {
                            Id = 7,
                            Barcode = "BC007",
                            Condition = "Excellent",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DetailsId = 6,
                            IsAvailable = true,
                            IsDeleted = false,
                            Location = "C-301"
                        },
                        new
                        {
                            Id = 8,
                            Barcode = "BC008",
                            Condition = "Good",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            DetailsId = 7,
                            IsAvailable = true,
                            IsDeleted = false,
                            Location = "C-302"
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.BookCopyLoan", b =>
                {
                    b.Property<int>("BookCopyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookCopyId", "LoanId");

                    b.HasIndex("LoanId");

                    b.ToTable("BookCopyLoans", (string)null);

                    b.HasData(
                        new
                        {
                            BookCopyId = 3,
                            LoanId = 1
                        },
                        new
                        {
                            BookCopyId = 6,
                            LoanId = 2
                        },
                        new
                        {
                            BookCopyId = 4,
                            LoanId = 3
                        },
                        new
                        {
                            BookCopyId = 3,
                            LoanId = 4
                        },
                        new
                        {
                            BookCopyId = 6,
                            LoanId = 5
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.BookDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ID");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AuthorID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Edition")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageBinary")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("English");

                    b.Property<int?>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<string>("Publisher")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("IX_BookDetails_AuthorId");

                    b.HasIndex("ISBN")
                        .IsUnique()
                        .HasDatabaseName("IX_BookDetails_ISBN");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_BookDetails_Title");

                    b.ToTable("BookDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Description = "Arguably Shakespeare's greatest tragedy about the Prince of Denmark's quest for revenge.",
                            Genre = "Tragedy",
                            ISBN = "9781472518381",
                            IsDeleted = false,
                            Language = "English",
                            Pages = 342,
                            PublicationDate = new DateTime(1603, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Hamlet"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Description = "King Lear is a tragedy written by William Shakespeare, depicting the gradual descent into madness of the title character.",
                            Genre = "Tragedy",
                            ISBN = "9780141012292",
                            IsDeleted = false,
                            Language = "English",
                            Pages = 256,
                            PublicationDate = new DateTime(1606, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "King Lear"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Description = "An intense drama of love, deception, jealousy and destruction.",
                            Genre = "Tragedy",
                            ISBN = "9781853260186",
                            IsDeleted = false,
                            Language = "English",
                            Pages = 178,
                            PublicationDate = new DateTime(1603, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Othello"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Description = "12 Rules for Life offers a deeply rewarding antidote to the chaos in our lives: eternal truths applied to our modern problems.",
                            Genre = "Self-Help",
                            ISBN = "9780345816023",
                            IsDeleted = false,
                            Language = "English",
                            Pages = 409,
                            PublicationDate = new DateTime(2018, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Random House Canada",
                            Title = "12 Rules for Life: An Antidote to Chaos"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Description = "Dale Carnegie had an understanding of human nature that will never be outdated.",
                            Genre = "Self-Help",
                            ISBN = "9781439199190",
                            IsDeleted = false,
                            Language = "English",
                            Pages = 291,
                            PublicationDate = new DateTime(1936, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Simon & Schuster",
                            Title = "How to Win Friends and Influence People"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Description = "A handbook of agile software craftsmanship that presents a revolutionary paradigm with practical advice.",
                            Genre = "Technology",
                            ISBN = "9780132350884",
                            IsDeleted = false,
                            Language = "English",
                            Pages = 464,
                            PublicationDate = new DateTime(2008, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Prentice Hall",
                            Title = "Clean Code: A Handbook of Agile Software Craftsmanship"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 5,
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Description = "The basics of being a ScrumMaster are fairly straightforward: Facilitate the Scrum process and remove impediments.",
                            Genre = "Business",
                            ISBN = "9780957587403",
                            IsDeleted = false,
                            Language = "English",
                            Pages = 152,
                            PublicationDate = new DateTime(2013, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "Inspect & Adapt Ltd",
                            Title = "Scrum Mastery: From Good To Great Servant-Leadership"
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Active");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DueDate")
                        .HasDatabaseName("IX_Loans_DueDate");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("IX_Loans_MemberId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Loans_Status");

                    b.ToTable("Loans", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fee = 0m,
                            IsDeleted = false,
                            MemberId = 3,
                            ReturnDate = new DateTime(2024, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Returned"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fee = 24m,
                            IsDeleted = false,
                            MemberId = 1,
                            ReturnDate = new DateTime(2024, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Returned"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fee = 0m,
                            IsDeleted = false,
                            MemberId = 2,
                            ReturnDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Returned"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fee = 0m,
                            IsDeleted = false,
                            MemberId = 2,
                            StartDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fee = 0m,
                            IsDeleted = false,
                            MemberId = 4,
                            StartDate = new DateTime(2024, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxLoans")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(3);

                    b.Property<DateTime>("MembershipStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Active");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Members_Email");

                    b.HasIndex("SSN")
                        .IsUnique()
                        .HasDatabaseName("IX_Members_SSN");

                    b.ToTable("Members", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Library Street, Stockholm",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Email = "daniel.graham@email.com",
                            IsDeleted = false,
                            MaxLoans = 3,
                            MembershipStartDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Daniel Graham",
                            PhoneNumber = "+46-70-123-4567",
                            SSN = "19855666-0001",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Book Avenue, Gothenburg",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Email = "eric.howell@email.com",
                            IsDeleted = false,
                            MaxLoans = 3,
                            MembershipStartDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Eric Howell",
                            PhoneNumber = "+46-70-234-5678",
                            SSN = "19555666-0002",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Reading Road, Malmö",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Email = "patricia.lebsack@email.com",
                            IsDeleted = false,
                            MaxLoans = 3,
                            MembershipStartDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Patricia Lebsack",
                            PhoneNumber = "+46-70-345-6789",
                            SSN = "19555666-0003",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Study Street, Uppsala",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Email = "kalle.runolfsdottir@email.com",
                            IsDeleted = false,
                            MaxLoans = 3,
                            MembershipStartDate = new DateTime(2023, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kalle Runolfsdottir",
                            PhoneNumber = "+46-70-456-7890",
                            SSN = "19555666-0004",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 5,
                            Address = "654 Knowledge Lane, Linköping",
                            CreatedDate = new DateTime(2025, 7, 11, 18, 43, 40, 585, DateTimeKind.Utc).AddTicks(5378),
                            Email = "linus.reichert@email.com",
                            IsDeleted = false,
                            MaxLoans = 3,
                            MembershipStartDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Linus Reichert",
                            PhoneNumber = "+46-70-567-8901",
                            SSN = "19555666-0005",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.BookCopy", b =>
                {
                    b.HasOne("Library.Domain.Entities.BookDetails", "Details")
                        .WithMany("Copies")
                        .HasForeignKey("DetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Library.Domain.Entities.BookCopyLoan", b =>
                {
                    b.HasOne("Library.Domain.Entities.BookCopy", "BookCopy")
                        .WithMany("BookCopyLoans")
                        .HasForeignKey("BookCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.Loan", "Loan")
                        .WithMany("BookCopyLoans")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookCopy");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("Library.Domain.Entities.BookDetails", b =>
                {
                    b.HasOne("Library.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Library.Domain.Entities.Loan", b =>
                {
                    b.HasOne("Library.Domain.Entities.Member", "Member")
                        .WithMany("Loans")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Library.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.Domain.Entities.BookCopy", b =>
                {
                    b.Navigation("BookCopyLoans");
                });

            modelBuilder.Entity("Library.Domain.Entities.BookDetails", b =>
                {
                    b.Navigation("Copies");
                });

            modelBuilder.Entity("Library.Domain.Entities.Loan", b =>
                {
                    b.Navigation("BookCopyLoans");
                });

            modelBuilder.Entity("Library.Domain.Entities.Member", b =>
                {
                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
